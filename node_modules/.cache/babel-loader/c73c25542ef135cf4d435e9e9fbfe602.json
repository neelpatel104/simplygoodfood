{"ast":null,"code":"var _jsxFileName = \"/Users/neelpatel/Desktop/Classes/342/Project/frontend-react/src/components/pages/Seller.js\";\nimport React from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport './FoodItems.css';\n/**\n * Seller dashboard webpage functionality\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Seller extends React.Component {\n  constructor(props) {\n    super(props); // Takes the username that was passed as a prop to this page's location and sets it as part of the state\n\n    var user;\n\n    if (this.props.location.state === undefined) {\n      user = \"\";\n    } else {\n      user = this.props.location.state.user;\n    } // Takes the authentication token from the cookie and saves it in state\n\n\n    let token = document.cookie.split('; ').find(row => row.startsWith('token'));\n    token = token.split('=')[1]; // Sets state\n\n    this.state = {\n      // Username of seller that is logged in (email)\n      user: user,\n      // Food items the seller is selling\n      items: [],\n      // Name of new food item to add\n      newName: \"\",\n      // Price of new food item to add\n      newPrice: \"\",\n      // Quantity of new food item to add\n      newQuantity: \"\",\n      // Delivery fee of new food item to add\n      newDeliveryFee: \"\",\n      // Authorization token value of the logged in user\n      token: token\n    }; // Binding\n\n    this.addFood = this.addFood.bind(this);\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.save = this.save.bind(this);\n    this.discard = this.discard.bind(this);\n    this.getFoodItems = this.getFoodItems.bind(this);\n    this.addTestingValues = this.addTestingValues.bind(this);\n    this.logOut = this.logOut.bind(this);\n  } // Runs as soon as Seller mounts\n  // Not in constructor to avoid warning\n\n\n  componentDidMount() {\n    this.getFoodItems();\n  }\n  /**\n   * Fetch the food items of a specific seller and loads them into state.items\n   */\n\n\n  async getFoodItems() {\n    await fetch(`http://localhost:8080/foodItems/seller/${this.state.user}`, {\n      method: 'GET',\n      credentials: 'include',\n      headers: {\n        'Authorization': `Bearer ${this.state.token}`\n      }\n    }).then(response => response.json()).then(responseJSON => {\n      let newItems = [];\n\n      for (let i = 0; i < responseJSON.length; i++) {\n        if (responseJSON[i].seller === this.state.user) {\n          newItems.push(responseJSON[i]);\n        }\n      }\n\n      this.setState({\n        items: newItems\n      });\n    }).catch(err => {// Do nothing, will be redirected to home page\n      // throw new Error(err);\n    });\n  }\n  /**\n   * Adds a new food item to the database\n   * @param {FoodItem} newItem the food item to add\n   */\n\n\n  async postFood(newItem) {\n    await fetch('http://localhost:8080/foodItems', {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.state.token}`\n      },\n      body: JSON.stringify(newItem)\n    }).then(() => this.getFoodItems()).catch(err => {\n      throw new Error(err);\n    });\n  }\n  /**\n   * Deletes a food item from the database\n   * @param {String} name the name of the food item\n   */\n\n\n  async deleteFood(name) {\n    await fetch(`http://localhost:8080/foodItems/${name}`, {\n      method: 'DELETE',\n      credentials: 'include',\n      headers: {\n        'Authorization': `Bearer ${this.state.token}`\n      }\n    }).then(() => this.getFoodItems()).catch(err => {\n      throw new Error(err);\n    });\n  }\n  /**\n   * Updates a food item in the database\n   * @param {FoodItem} newItem the food item with updated fields\n   */\n\n\n  async putFood(newItem) {\n    await fetch('http://localhost:8080/foodItems', {\n      method: 'PUT',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.state.token}`\n      },\n      body: JSON.stringify(newItem)\n    }).then(response => {// Do nothing\n    }).catch(err => {\n      throw new Error(err);\n    });\n  }\n  /**\n   * Adds a food item to the database by calling postFood\n   * @param {Event} event button click event\n   */\n\n\n  addFood(event) {\n    event.preventDefault();\n    let newItem = {\n      name: this.state.newName,\n      price: this.state.newPrice,\n      quantity: this.state.newQuantity,\n      deliveryFee: this.state.newDeliveryFee\n    };\n    this.postFood(newItem); //Reset input boxes\n\n    this.setState({\n      newName: \"\"\n    });\n    this.setState({\n      newPrice: \"\"\n    });\n    this.setState({\n      newQuantity: \"\"\n    });\n    this.setState({\n      newPickup: \"\"\n    });\n    this.setState({\n      newDeliveryFee: \"\"\n    });\n  }\n  /**\n   * Handles input box text changes\n   * @param {Event} event input box text change event\n   */\n\n\n  handleTextChange(event) {\n    const value = event.target.value;\n    this.setState({\n      [event.target.name]: value\n    });\n  }\n  /**\n   * Used by each Card to update the food item they represent by calling putFood\n   * Method is passed to each Card as a prop\n   * @param {*} name name of the food item to update\n   * @param {*} price the new price\n   * @param {*} quantity the new quantity\n   * @param {*} deliveryFee the new delivery fee\n   */\n\n\n  save(name, price, quantity, deliveryFee) {\n    let newItem = {\n      name: name,\n      price: price,\n      quantity: quantity,\n      deliveryFee: deliveryFee\n    };\n    this.putFood(newItem);\n  }\n  /**\n   * Used by each Card to delete the food item they represent by calling deleteFood\n   * Method is passed to each Card as a prop\n   * @param {*} name the name of the food item to delete\n   */\n\n\n  discard(name) {\n    this.deleteFood(name);\n  }\n\n  logOut() {\n    document.cookie = \"token=\";\n    this.setState({\n      user: \"\"\n    });\n  }\n  /**\n   * Renders html of all the food item cards\n   * @returns html of all the food item cards\n   */\n\n\n  renderCards() {\n    var cards = [];\n\n    for (let i = 0; i < this.state.items.length; i++) {\n      cards.push( /*#__PURE__*/_jsxDEV(Card, {\n        name: this.state.items[i].name,\n        price: this.state.items[i].price,\n        quantity: this.state.items[i].quantity,\n        deliveryFee: this.state.items[i].deliveryFee,\n        save: this.save,\n        discard: this.discard\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 18\n      }, this));\n    }\n\n    return cards;\n  }\n  /**\n   * Temporary functionality for adding food items for testing\n   */\n\n\n  addTestingValues() {\n    let newFood = {\n      name: \"Tomatoes\",\n      price: 1.23,\n      quantity: 15,\n      pickup: \"Address Dr\",\n      deliveryFee: 5.99\n    };\n    this.postFood(newFood);\n    newFood = {\n      name: \"Leftover Pasta\",\n      price: 0.78,\n      quantity: 9,\n      pickup: \"Address Dr\",\n      deliveryFee: 5.99\n    };\n    this.postFood(newFood);\n    newFood = {\n      name: \"Cabbages\",\n      price: 3.45,\n      quantity: 2,\n      pickup: \"Address Dr\",\n      deliveryFee: 5.99\n    };\n    this.postFood(newFood);\n  }\n  /**\n   * Renders the card for the seller to use to add a new food item\n   * @returns html for the card for the seller to use to add a new food item\n   */\n\n\n  renderForm() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"itemColumns\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"itemValues\",\n        align: \"center\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.addFood,\n          children: [\"Food name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"newName\",\n            value: this.state.newName,\n            onChange: this.handleTextChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this), \"Price: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"newPrice\",\n            value: this.state.newPrice,\n            onChange: this.handleTextChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 22\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this), \"Quantity: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"newQuantity\",\n            value: this.state.newQuantity,\n            onChange: this.handleTextChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this), \"Delivery fee: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"newDeliveryFee\",\n            value: this.state.newDeliveryFee,\n            onChange: this.handleTextChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"itemButton\",\n            children: \"Add food\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }, this);\n  }\n  /**\n   * Renders the Seller component as html\n   * @returns the Seller page as html\n   */\n\n\n  render() {\n    //Return to home page if no user is logged in\n    if (this.state.user === \"\") {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"content-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"pageheader\",\n          children: \"Seller Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rows\",\n          align: \"right\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            align: \"right\",\n            className: \"selectButton\",\n            onClick: this.logOut,\n            children: \"Log Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), this.renderCards(), this.renderForm(), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"itemColumns\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"itemValues\",\n            align: \"center\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"itemButton\",\n              onClick: this.addTestingValues,\n              children: \"Populate with testing items\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/**\n * Represents a food item 'card' on the webpage\n */\n\nclass Card extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      price: this.props.price,\n      quantity: this.props.quantity,\n      pickup: this.props.pickup,\n      deliveryFee: this.props.deliveryFee\n    };\n    this.handleTextChange = this.handleTextChange.bind(this);\n  }\n  /**\n   * Handles input box text changes\n   * @param {Event} event input box text change event\n   */\n\n\n  handleTextChange(event) {\n    const value = event.target.value;\n    this.setState({\n      [event.target.name]: value\n    });\n  }\n  /**\n   * Renders the food item card\n   * @returns html of the food item card\n   */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"itemColumns\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"itemValues\",\n        align: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Name: \", this.props.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this), \"Price: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"price\",\n          value: this.state.price,\n          onChange: this.handleTextChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this), \"Quantity: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"quantity\",\n          min: \"0\",\n          value: this.state.quantity,\n          onChange: this.handleTextChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), \"Delivery: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"deliveryFee\",\n          value: this.state.deliveryFee,\n          onChange: this.handleTextChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"itemButton\",\n          onClick: () => {\n            // Calls the save method in Seller that was passed to Card as a prop\n            this.props.save(this.props.name, this.state.price, this.state.quantity, this.state.deliveryFee);\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"itemButton\",\n          onClick: () => {\n            // Calls the discard method in Seller that was passed to Card as a prop\n            this.props.discard(this.props.name);\n          },\n          children: \"Discard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/neelpatel/Desktop/Classes/342/Project/frontend-react/src/components/pages/Seller.js"],"names":["React","Redirect","Seller","Component","constructor","props","user","location","state","undefined","token","document","cookie","split","find","row","startsWith","items","newName","newPrice","newQuantity","newDeliveryFee","addFood","bind","handleTextChange","save","discard","getFoodItems","addTestingValues","logOut","componentDidMount","fetch","method","credentials","headers","then","response","json","responseJSON","newItems","i","length","seller","push","setState","catch","err","postFood","newItem","body","JSON","stringify","Error","deleteFood","name","putFood","event","preventDefault","price","quantity","deliveryFee","newPickup","value","target","renderCards","cards","newFood","pickup","renderForm","render","Card"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,OAAO,+CAAP;AACA,OAAO,0CAAP;AACA,OAAO,iBAAP;AAEA;AACA;AACA;;;AACA,eAAe,MAAMC,MAAN,SAAqBF,KAAK,CAACG,SAA3B,CAAqC;AAClDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;;AACA,QAAIC,IAAJ;;AACA,QAAI,KAAKD,KAAL,CAAWE,QAAX,CAAoBC,KAApB,KAA8BC,SAAlC,EAA6C;AAC3CH,MAAAA,IAAI,GAAG,EAAP;AACD,KAFD,MAEO;AACLA,MAAAA,IAAI,GAAG,KAAKD,KAAL,CAAWE,QAAX,CAAoBC,KAApB,CAA0BF,IAAjC;AACD,KATgB,CAWjB;;;AACA,QAAII,KAAK,GAAGC,QAAQ,CAACC,MAAT,CAAgBC,KAAhB,CAAsB,IAAtB,EAA4BC,IAA5B,CAAiCC,GAAG,IAAIA,GAAG,CAACC,UAAJ,CAAe,OAAf,CAAxC,CAAZ;AACAN,IAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAR,CAbiB,CAejB;;AACA,SAAKL,KAAL,GAAa;AACX;AACAF,MAAAA,IAAI,EAAEA,IAFK;AAGX;AACAW,MAAAA,KAAK,EAAE,EAJI;AAKX;AACAC,MAAAA,OAAO,EAAE,EANE;AAOX;AACAC,MAAAA,QAAQ,EAAE,EARC;AASX;AACAC,MAAAA,WAAW,EAAE,EAVF;AAWX;AACAC,MAAAA,cAAc,EAAE,EAZL;AAaX;AACAX,MAAAA,KAAK,EAAEA;AAdI,KAAb,CAhBiB,CAkCjB;;AACA,SAAKY,OAAL,GAAa,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAb;AACA,SAAKC,gBAAL,GAAsB,KAAKA,gBAAL,CAAsBD,IAAtB,CAA2B,IAA3B,CAAtB;AACA,SAAKE,IAAL,GAAU,KAAKA,IAAL,CAAUF,IAAV,CAAe,IAAf,CAAV;AACA,SAAKG,OAAL,GAAa,KAAKA,OAAL,CAAaH,IAAb,CAAkB,IAAlB,CAAb;AACA,SAAKI,YAAL,GAAkB,KAAKA,YAAL,CAAkBJ,IAAlB,CAAuB,IAAvB,CAAlB;AACA,SAAKK,gBAAL,GAAsB,KAAKA,gBAAL,CAAsBL,IAAtB,CAA2B,IAA3B,CAAtB;AACA,SAAKM,MAAL,GAAY,KAAKA,MAAL,CAAYN,IAAZ,CAAiB,IAAjB,CAAZ;AACD,GA3CiD,CA6ClD;AACA;;;AACAO,EAAAA,iBAAiB,GAAG;AAClB,SAAKH,YAAL;AACD;AAED;AACF;AACA;;;AACoB,QAAZA,YAAY,GAAG;AACnB,UAAMI,KAAK,CAAE,0CAAyC,KAAKvB,KAAL,CAAWF,IAAK,EAA3D,EAA8D;AACvE0B,MAAAA,MAAM,EAAE,KAD+D;AAEvEC,MAAAA,WAAW,EAAE,SAF0D;AAGvEC,MAAAA,OAAO,EAAE;AACP,yBAAkB,UAAS,KAAK1B,KAAL,CAAWE,KAAM;AADrC;AAH8D,KAA9D,CAAL,CAOLyB,IAPK,CAOAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPZ,EAQLF,IARK,CAQAG,YAAY,IAAI;AACpB,UAAIC,QAAQ,GAAG,EAAf;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,YAAY,CAACG,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,YAAIF,YAAY,CAACE,CAAD,CAAZ,CAAgBE,MAAhB,KAA2B,KAAKlC,KAAL,CAAWF,IAA1C,EAAgD;AAC9CiC,UAAAA,QAAQ,CAACI,IAAT,CAAcL,YAAY,CAACE,CAAD,CAA1B;AACD;AACF;;AACD,WAAKI,QAAL,CAAc;AAAE3B,QAAAA,KAAK,EAAEsB;AAAT,OAAd;AACD,KAhBK,EAiBLM,KAjBK,CAiBCC,GAAG,IAAI,CACZ;AACA;AACD,KApBK,CAAN;AAqBD;AAED;AACF;AACA;AACA;;;AACgB,QAARC,QAAQ,CAACC,OAAD,EAAU;AACtB,UAAMjB,KAAK,CAAC,iCAAD,EAAoC;AAC7CC,MAAAA,MAAM,EAAE,MADqC;AAE7CC,MAAAA,WAAW,EAAE,SAFgC;AAG7CC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,yBAAkB,UAAS,KAAK1B,KAAL,CAAWE,KAAM;AAFrC,OAHoC;AAO7CuC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,OAAf;AAPuC,KAApC,CAAL,CASLb,IATK,CASA,MAAM,KAAKR,YAAL,EATN,EAULkB,KAVK,CAUCC,GAAG,IAAI;AACZ,YAAM,IAAIM,KAAJ,CAAUN,GAAV,CAAN;AACD,KAZK,CAAN;AAaD;AAED;AACF;AACA;AACA;;;AACkB,QAAVO,UAAU,CAACC,IAAD,EAAO;AACrB,UAAMvB,KAAK,CAAE,mCAAkCuB,IAAK,EAAzC,EAA4C;AACrDtB,MAAAA,MAAM,EAAE,QAD6C;AAErDC,MAAAA,WAAW,EAAE,SAFwC;AAGrDC,MAAAA,OAAO,EAAE;AACP,yBAAkB,UAAS,KAAK1B,KAAL,CAAWE,KAAM;AADrC;AAH4C,KAA5C,CAAL,CAOLyB,IAPK,CAOA,MAAM,KAAKR,YAAL,EAPN,EAQLkB,KARK,CAQCC,GAAG,IAAI;AACZ,YAAM,IAAIM,KAAJ,CAAUN,GAAV,CAAN;AACD,KAVK,CAAN;AAWD;AAED;AACF;AACA;AACA;;;AACe,QAAPS,OAAO,CAACP,OAAD,EAAU;AACrB,UAAMjB,KAAK,CAAC,iCAAD,EAAoC;AAC7CC,MAAAA,MAAM,EAAE,KADqC;AAE7CC,MAAAA,WAAW,EAAE,SAFgC;AAG7CC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,yBAAkB,UAAS,KAAK1B,KAAL,CAAWE,KAAM;AAFrC,OAHoC;AAO7CuC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,OAAf;AAPuC,KAApC,CAAL,CAQHb,IARG,CAQEC,QAAQ,IAAI,CAClB;AACD,KAVK,EAWLS,KAXK,CAWCC,GAAG,IAAI;AACZ,YAAM,IAAIM,KAAJ,CAAUN,GAAV,CAAN;AACD,KAbK,CAAN;AAcD;AAED;AACF;AACA;AACA;;;AACExB,EAAAA,OAAO,CAACkC,KAAD,EAAQ;AACbA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAIT,OAAO,GAAG;AAACM,MAAAA,IAAI,EAAE,KAAK9C,KAAL,CAAWU,OAAlB;AACAwC,MAAAA,KAAK,EAAE,KAAKlD,KAAL,CAAWW,QADlB;AAC4BwC,MAAAA,QAAQ,EAAE,KAAKnD,KAAL,CAAWY,WADjD;AAC8DwC,MAAAA,WAAW,EAAE,KAAKpD,KAAL,CAAWa;AADtF,KAAd;AAGA,SAAK0B,QAAL,CAAcC,OAAd,EALa,CAOb;;AACA,SAAKJ,QAAL,CAAc;AAAC1B,MAAAA,OAAO,EAAE;AAAV,KAAd;AACA,SAAK0B,QAAL,CAAc;AAACzB,MAAAA,QAAQ,EAAE;AAAX,KAAd;AACA,SAAKyB,QAAL,CAAc;AAACxB,MAAAA,WAAW,EAAE;AAAd,KAAd;AACA,SAAKwB,QAAL,CAAc;AAACiB,MAAAA,SAAS,EAAE;AAAZ,KAAd;AACA,SAAKjB,QAAL,CAAc;AAACvB,MAAAA,cAAc,EAAE;AAAjB,KAAd;AACD;AAED;AACF;AACA;AACA;;;AACEG,EAAAA,gBAAgB,CAACgC,KAAD,EAAQ;AACtB,UAAMM,KAAK,GAAGN,KAAK,CAACO,MAAN,CAAaD,KAA3B;AACA,SAAKlB,QAAL,CAAc;AACZ,OAACY,KAAK,CAACO,MAAN,CAAaT,IAAd,GAAqBQ;AADT,KAAd;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACErC,EAAAA,IAAI,CAAC6B,IAAD,EAAOI,KAAP,EAAcC,QAAd,EAAwBC,WAAxB,EAAqC;AACvC,QAAIZ,OAAO,GAAG;AAACM,MAAAA,IAAI,EAAEA,IAAP;AAAaI,MAAAA,KAAK,EAAEA,KAApB;AAA2BC,MAAAA,QAAQ,EAAEA,QAArC;AAA+CC,MAAAA,WAAW,EAAEA;AAA5D,KAAd;AACA,SAAKL,OAAL,CAAaP,OAAb;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEtB,EAAAA,OAAO,CAAC4B,IAAD,EAAO;AACZ,SAAKD,UAAL,CAAgBC,IAAhB;AACD;;AAEDzB,EAAAA,MAAM,GAAE;AACNlB,IAAAA,QAAQ,CAACC,MAAT,GAAkB,QAAlB;AACA,SAAKgC,QAAL,CAAc;AAACtC,MAAAA,IAAI,EAAE;AAAP,KAAd;AACD;AAED;AACF;AACA;AACA;;;AACE0D,EAAAA,WAAW,GAAG;AACZ,QAAIC,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKhC,KAAL,CAAWS,KAAX,CAAiBwB,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAChDyB,MAAAA,KAAK,CAACtB,IAAN,eAAW,QAAC,IAAD;AAEH,QAAA,IAAI,EAAE,KAAKnC,KAAL,CAAWS,KAAX,CAAiBuB,CAAjB,EAAoBc,IAFvB;AAGH,QAAA,KAAK,EAAE,KAAK9C,KAAL,CAAWS,KAAX,CAAiBuB,CAAjB,EAAoBkB,KAHxB;AAIH,QAAA,QAAQ,EAAE,KAAKlD,KAAL,CAAWS,KAAX,CAAiBuB,CAAjB,EAAoBmB,QAJ3B;AAKH,QAAA,WAAW,EAAE,KAAKnD,KAAL,CAAWS,KAAX,CAAiBuB,CAAjB,EAAoBoB,WAL9B;AAMH,QAAA,IAAI,EAAE,KAAKnC,IANR;AAOH,QAAA,OAAO,EAAE,KAAKC;AAPX,SACEc,CADF;AAAA;AAAA;AAAA;AAAA,cAAX;AASD;;AACD,WAAOyB,KAAP;AACD;AAED;AACF;AACA;;;AACErC,EAAAA,gBAAgB,GAAG;AACjB,QAAIsC,OAAO,GAAG;AAACZ,MAAAA,IAAI,EAAE,UAAP;AAAmBI,MAAAA,KAAK,EAAE,IAA1B;AAAgCC,MAAAA,QAAQ,EAAE,EAA1C;AAA8CQ,MAAAA,MAAM,EAAE,YAAtD;AAAoEP,MAAAA,WAAW,EAAE;AAAjF,KAAd;AACA,SAAKb,QAAL,CAAcmB,OAAd;AACAA,IAAAA,OAAO,GAAG;AAACZ,MAAAA,IAAI,EAAE,gBAAP;AAAyBI,MAAAA,KAAK,EAAE,IAAhC;AAAsCC,MAAAA,QAAQ,EAAE,CAAhD;AAAmDQ,MAAAA,MAAM,EAAE,YAA3D;AAAyEP,MAAAA,WAAW,EAAE;AAAtF,KAAV;AACA,SAAKb,QAAL,CAAcmB,OAAd;AACAA,IAAAA,OAAO,GAAG;AAACZ,MAAAA,IAAI,EAAE,UAAP;AAAmBI,MAAAA,KAAK,EAAE,IAA1B;AAAgCC,MAAAA,QAAQ,EAAE,CAA1C;AAA6CQ,MAAAA,MAAM,EAAE,YAArD;AAAmEP,MAAAA,WAAW,EAAE;AAAhF,KAAV;AACA,SAAKb,QAAL,CAAcmB,OAAd;AACD;AAED;AACF;AACA;AACA;;;AACEE,EAAAA,UAAU,GAAG;AACX,wBACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAA4B,QAAA,KAAK,EAAC,QAAlC;AAAA,+BACE;AAAM,UAAA,QAAQ,EAAE,KAAK9C,OAArB;AAAA,iDACa;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,IAAI,EAAC,SAAxB;AAAkC,YAAA,KAAK,EAAE,KAAKd,KAAL,CAAWU,OAApD;AAA6D,YAAA,QAAQ,EAAE,KAAKM;AAA5E;AAAA;AAAA;AAAA;AAAA,kBADb,eAEE;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA;AAAA;AAAA;AAAA,kBAHF,0BAIS;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,IAAI,EAAC,UAAxB;AAAmC,YAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWW,QAArD;AAA+D,YAAA,QAAQ,EAAE,KAAKK;AAA9E;AAAA;AAAA;AAAA;AAAA,kBAJT,eAKE;AAAA;AAAA;AAAA;AAAA,kBALF,eAME;AAAA;AAAA;AAAA;AAAA,kBANF,6BAOY;AAAO,YAAA,IAAI,EAAC,QAAZ;AAAqB,YAAA,IAAI,EAAC,aAA1B;AAAwC,YAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWY,WAA1D;AAAuE,YAAA,QAAQ,EAAE,KAAKI;AAAtF;AAAA;AAAA;AAAA;AAAA,kBAPZ,eAQE;AAAA;AAAA;AAAA;AAAA,kBARF,eASE;AAAA;AAAA;AAAA;AAAA,kBATF,iCAUgB;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,IAAI,EAAC,gBAAxB;AAAyC,YAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWa,cAA3D;AAA2E,YAAA,QAAQ,EAAE,KAAKG;AAA1F;AAAA;AAAA;AAAA;AAAA,kBAVhB,eAWE;AAAA;AAAA;AAAA;AAAA,kBAXF,eAYE;AAAA;AAAA;AAAA;AAAA,kBAZF,eAaE;AAAA;AAAA;AAAA;AAAA,kBAbF,eAcE;AAAQ,YAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADJ;AAwBD;AAED;AACF;AACA;AACA;;;AACE6C,EAAAA,MAAM,GAAG;AACP;AACA,QAAI,KAAK7D,KAAL,CAAWF,IAAX,KAAoB,EAAxB,EAA4B;AACxB,0BACE,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cADF;AAGH;;AAED,wBACE,QAAC,KAAD,CAAO,QAAP;AAAA,6BACE;AAAS,QAAA,SAAS,EAAC,mBAAnB;AAAA,gCACE;AAAI,UAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAK,UAAA,SAAS,EAAC,MAAf;AAAsB,UAAA,KAAK,EAAC,OAA5B;AAAA,iCACE;AAAQ,YAAA,KAAK,EAAC,OAAd;AAAsB,YAAA,SAAS,EAAC,cAAhC;AAA+C,YAAA,OAAO,EAAE,KAAKuB,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAHF,eASE;AAAA;AAAA;AAAA;AAAA,gBATF,EAWG,KAAKmC,WAAL,EAXH,EAaG,KAAKI,UAAL,EAbH,eAeE;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,YAAf;AAA4B,YAAA,KAAK,EAAC,QAAlC;AAAA,mCACE;AAAQ,cAAA,SAAS,EAAC,YAAlB;AAA+B,cAAA,OAAO,EAAE,KAAKxC,gBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AA4BD;;AAzSiD;AA4SpD;AACA;AACA;;AACC,MAAM0C,IAAN,SAAmBtE,KAAK,CAACG,SAAzB,CAAmC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKG,KAAL,GAAa;AACXkD,MAAAA,KAAK,EAAE,KAAKrD,KAAL,CAAWqD,KADP;AAEXC,MAAAA,QAAQ,EAAE,KAAKtD,KAAL,CAAWsD,QAFV;AAGXQ,MAAAA,MAAM,EAAE,KAAK9D,KAAL,CAAW8D,MAHR;AAIXP,MAAAA,WAAW,EAAE,KAAKvD,KAAL,CAAWuD;AAJb,KAAb;AAMA,SAAKpC,gBAAL,GAAsB,KAAKA,gBAAL,CAAsBD,IAAtB,CAA2B,IAA3B,CAAtB;AACD;AAED;AACF;AACA;AACA;;;AACEC,EAAAA,gBAAgB,CAACgC,KAAD,EAAQ;AACtB,UAAMM,KAAK,GAAGN,KAAK,CAACO,MAAN,CAAaD,KAA3B;AACA,SAAKlB,QAAL,CAAc;AACZ,OAACY,KAAK,CAACO,MAAN,CAAaT,IAAd,GAAqBQ;AADT,KAAd;AAGD;AAED;AACF;AACA;AACA;;;AACEO,EAAAA,MAAM,GAAI;AACR,wBACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAA4B,QAAA,KAAK,EAAC,QAAlC;AAAA,gCACE;AAAA,+BAAU,KAAKhE,KAAL,CAAWiD,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA,gBAFF,0BAGS;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAoB,UAAA,IAAI,EAAC,OAAzB;AAAiC,UAAA,KAAK,EAAE,KAAK9C,KAAL,CAAWkD,KAAnD;AAA0D,UAAA,QAAQ,EAAE,KAAKlC;AAAzE;AAAA;AAAA;AAAA;AAAA,gBAHT,eAIE;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE;AAAA;AAAA;AAAA;AAAA,gBALF,6BAMY;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,IAAI,EAAC,UAA1B;AAAqC,UAAA,GAAG,EAAC,GAAzC;AAA6C,UAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWmD,QAA/D;AAAyE,UAAA,QAAQ,EAAE,KAAKnC;AAAxF;AAAA;AAAA;AAAA;AAAA,gBANZ,eAOE;AAAA;AAAA;AAAA;AAAA,gBAPF,eAQE;AAAA;AAAA;AAAA;AAAA,gBARF,6BASY;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,IAAI,EAAC,aAAxB;AAAsC,UAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWoD,WAAxD;AAAqE,UAAA,QAAQ,EAAE,KAAKpC;AAApF;AAAA;AAAA;AAAA;AAAA,gBATZ,eAUE;AAAA;AAAA;AAAA;AAAA,gBAVF,eAWE;AAAA;AAAA;AAAA;AAAA,gBAXF,eAYE;AAAA;AAAA;AAAA;AAAA,gBAZF,eAcE;AAAQ,UAAA,SAAS,EAAC,YAAlB;AAA+B,UAAA,OAAO,EAAE,MAAM;AAC5C;AACA,iBAAKnB,KAAL,CAAWoB,IAAX,CAAgB,KAAKpB,KAAL,CAAWiD,IAA3B,EAAiC,KAAK9C,KAAL,CAAWkD,KAA5C,EAAmD,KAAKlD,KAAL,CAAWmD,QAA9D,EAAwE,KAAKnD,KAAL,CAAWoD,WAAnF;AACD,WAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdF,eAmBE;AAAQ,UAAA,SAAS,EAAC,YAAlB;AAA+B,UAAA,OAAO,EAAE,MAAM;AAC5C;AACA,iBAAKvD,KAAL,CAAWqB,OAAX,CAAmB,KAAKrB,KAAL,CAAWiD,IAA9B;AACD,WAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AA6BD;;AAzDiC","sourcesContent":["import React from 'react';\nimport { Redirect } from \"react-router-dom\";\n\nimport '@fortawesome/fontawesome-free/css/all.min.css'; \nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport './FoodItems.css'\n\n/**\n * Seller dashboard webpage functionality\n */\nexport default class Seller extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Takes the username that was passed as a prop to this page's location and sets it as part of the state\n    var user;\n    if (this.props.location.state === undefined) {\n      user = \"\";\n    } else {\n      user = this.props.location.state.user;\n    }\n\n    // Takes the authentication token from the cookie and saves it in state\n    let token = document.cookie.split('; ').find(row => row.startsWith('token'));\n    token = token.split('=')[1];\n\n    // Sets state\n    this.state = {\n      // Username of seller that is logged in (email)\n      user: user,\n      // Food items the seller is selling\n      items: [],\n      // Name of new food item to add\n      newName: \"\",\n      // Price of new food item to add\n      newPrice: \"\",\n      // Quantity of new food item to add\n      newQuantity: \"\",\n      // Delivery fee of new food item to add\n      newDeliveryFee: \"\",\n      // Authorization token value of the logged in user\n      token: token,\n    \n    };\n\n    // Binding\n    this.addFood=this.addFood.bind(this);\n    this.handleTextChange=this.handleTextChange.bind(this);\n    this.save=this.save.bind(this);\n    this.discard=this.discard.bind(this);\n    this.getFoodItems=this.getFoodItems.bind(this);\n    this.addTestingValues=this.addTestingValues.bind(this);\n    this.logOut=this.logOut.bind(this);\n  }\n\n  // Runs as soon as Seller mounts\n  // Not in constructor to avoid warning\n  componentDidMount() {\n    this.getFoodItems();\n  }\n\n  /**\n   * Fetch the food items of a specific seller and loads them into state.items\n   */\n  async getFoodItems() {\n    await fetch(`http://localhost:8080/foodItems/seller/${this.state.user}`, {\n      method: 'GET',\n      credentials: 'include',\n      headers: {\n        'Authorization': `Bearer ${this.state.token}`,\n      }\n    })\n    .then(response => response.json())\n    .then(responseJSON => {\n      let newItems = [];\n      for (let i = 0; i < responseJSON.length; i++) {\n        if (responseJSON[i].seller === this.state.user) {\n          newItems.push(responseJSON[i]);\n        }\n      }\n      this.setState({ items: newItems });\n    })\n    .catch(err => {\n      // Do nothing, will be redirected to home page\n      // throw new Error(err);\n    })\n  }\n\n  /**\n   * Adds a new food item to the database\n   * @param {FoodItem} newItem the food item to add\n   */\n  async postFood(newItem) {\n    await fetch('http://localhost:8080/foodItems', {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.state.token}`,\n      },\n      body: JSON.stringify(newItem)\n    })\n    .then(() => this.getFoodItems())\n    .catch(err => {\n      throw new Error(err)\n    })\n  }\n\n  /**\n   * Deletes a food item from the database\n   * @param {String} name the name of the food item\n   */\n  async deleteFood(name) {\n    await fetch(`http://localhost:8080/foodItems/${name}`, {\n      method: 'DELETE',\n      credentials: 'include',\n      headers: {\n        'Authorization': `Bearer ${this.state.token}`,\n      },\n    })\n    .then(() => this.getFoodItems())\n    .catch(err => {\n      throw new Error(err)\n    })\n  }\n\n  /**\n   * Updates a food item in the database\n   * @param {FoodItem} newItem the food item with updated fields\n   */\n  async putFood(newItem) {\n    await fetch('http://localhost:8080/foodItems', {\n      method: 'PUT',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.state.token}`,\n      },\n      body: JSON.stringify(newItem)\n    }).then(response => {\n      // Do nothing\n    })\n    .catch(err => {\n      throw new Error(err)\n    })\n  }\n\n  /**\n   * Adds a food item to the database by calling postFood\n   * @param {Event} event button click event\n   */\n  addFood(event) {\n    event.preventDefault();\n    let newItem = {name: this.state.newName,\n                  price: this.state.newPrice, quantity: this.state.newQuantity, deliveryFee: this.state.newDeliveryFee};\n\n    this.postFood(newItem);\n\n    //Reset input boxes\n    this.setState({newName: \"\"});\n    this.setState({newPrice: \"\"});\n    this.setState({newQuantity: \"\"});\n    this.setState({newPickup: \"\"});\n    this.setState({newDeliveryFee: \"\"});\n  }\n\n  /**\n   * Handles input box text changes\n   * @param {Event} event input box text change event\n   */\n  handleTextChange(event) {\n    const value = event.target.value;\n    this.setState({\n      [event.target.name]: value\n    });\n  }\n\n  /**\n   * Used by each Card to update the food item they represent by calling putFood\n   * Method is passed to each Card as a prop\n   * @param {*} name name of the food item to update\n   * @param {*} price the new price\n   * @param {*} quantity the new quantity\n   * @param {*} deliveryFee the new delivery fee\n   */\n  save(name, price, quantity, deliveryFee) {\n    let newItem = {name: name, price: price, quantity: quantity, deliveryFee: deliveryFee};\n    this.putFood(newItem);\n  }\n\n  /**\n   * Used by each Card to delete the food item they represent by calling deleteFood\n   * Method is passed to each Card as a prop\n   * @param {*} name the name of the food item to delete\n   */\n  discard(name) {\n    this.deleteFood(name);\n  }\n\n  logOut(){\n    document.cookie = \"token=\";\n    this.setState({user: \"\"});\n  }\n\n  /**\n   * Renders html of all the food item cards\n   * @returns html of all the food item cards\n   */\n  renderCards() {\n    var cards = [];\n    for (let i = 0; i < this.state.items.length; i++) {\n      cards.push(<Card\n              key={i}\n              name={this.state.items[i].name}\n              price={this.state.items[i].price}\n              quantity={this.state.items[i].quantity}\n              deliveryFee={this.state.items[i].deliveryFee}\n              save={this.save}\n              discard={this.discard}\n            />);\n    }\n    return cards;\n  }\n\n  /**\n   * Temporary functionality for adding food items for testing\n   */\n  addTestingValues() {\n    let newFood = {name: \"Tomatoes\", price: 1.23, quantity: 15, pickup: \"Address Dr\", deliveryFee: 5.99};\n    this.postFood(newFood);\n    newFood = {name: \"Leftover Pasta\", price: 0.78, quantity: 9, pickup: \"Address Dr\", deliveryFee: 5.99};\n    this.postFood(newFood);\n    newFood = {name: \"Cabbages\", price: 3.45, quantity: 2, pickup: \"Address Dr\", deliveryFee: 5.99};\n    this.postFood(newFood);\n  }\n\n  /**\n   * Renders the card for the seller to use to add a new food item\n   * @returns html for the card for the seller to use to add a new food item\n   */\n  renderForm() {\n    return (\n        <div className=\"itemColumns\">\n          <div className=\"itemValues\" align=\"center\">\n            <form onSubmit={this.addFood}>\n              Food name: <input type=\"text\" name=\"newName\" value={this.state.newName} onChange={this.handleTextChange}></input>\n              <br />\n              <br />\n              Price: <input type=\"text\" name=\"newPrice\" value={this.state.newPrice} onChange={this.handleTextChange}></input>\n              <br />\n              <br />\n              Quantity: <input type=\"number\" name=\"newQuantity\" value={this.state.newQuantity} onChange={this.handleTextChange}></input>\n              <br />\n              <br />\n              Delivery fee: <input type=\"text\" name=\"newDeliveryFee\" value={this.state.newDeliveryFee} onChange={this.handleTextChange}></input>\n              <br />\n              <br />\n              <br />\n              <button className=\"itemButton\">\n                Add food\n              </button>\n            </form>\n          </div>\n        </div>\n    );\n  }\n\n  /**\n   * Renders the Seller component as html\n   * @returns the Seller page as html\n   */\n  render() {\n    //Return to home page if no user is logged in\n    if (this.state.user === \"\") {\n        return(\n          <Redirect to=\"/\" />\n        );\n    }\n\n    return (\n      <React.Fragment>\n        <section className=\"content-container\">\n          <h1 className=\"pageheader\">Seller Dashboard</h1>\n          <br />\n          <div className=\"rows\" align=\"right\"> \n            <button align=\"right\" className=\"selectButton\" onClick={this.logOut}>\n              Log Out\n            </button>\n          </div>\n          \n          <br />\n          \n          {this.renderCards()}\n\n          {this.renderForm()}\n\n          <div className=\"itemColumns\">\n            <div className=\"itemValues\" align=\"center\">\n              <button className=\"itemButton\" onClick={this.addTestingValues}>\n                Populate with testing items\n              </button>\n            </div>\n          </div>\n\n        </section>\n      </React.Fragment>\n    );\n  }\n}\n\n/**\n * Represents a food item 'card' on the webpage\n */\n class Card extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      price: this.props.price,\n      quantity: this.props.quantity,\n      pickup: this.props.pickup,\n      deliveryFee: this.props.deliveryFee,\n    };\n    this.handleTextChange=this.handleTextChange.bind(this);\n  }\n\n  /**\n   * Handles input box text changes\n   * @param {Event} event input box text change event\n   */\n  handleTextChange(event) {\n    const value = event.target.value;\n    this.setState({\n      [event.target.name]: value\n    });\n  }\n\n  /**\n   * Renders the food item card\n   * @returns html of the food item card\n   */\n  render () {\n    return (\n      <div className=\"itemColumns\">\n        <div className=\"itemValues\" align=\"center\">\n          <p>Name: {this.props.name}</p>\n          <br />\n          Price: <input type=\"text\"  name=\"price\" value={this.state.price} onChange={this.handleTextChange}></input>\n          <br />\n          <br />\n          Quantity: <input type=\"number\" name=\"quantity\" min='0' value={this.state.quantity} onChange={this.handleTextChange}></input>\n          <br />\n          <br />\n          Delivery: <input type=\"text\" name=\"deliveryFee\" value={this.state.deliveryFee} onChange={this.handleTextChange}></input>\n          <br />\n          <br />\n          <br />\n\n          <button className=\"itemButton\" onClick={() => {\n            // Calls the save method in Seller that was passed to Card as a prop\n            this.props.save(this.props.name, this.state.price, this.state.quantity, this.state.deliveryFee);\n          }}>Save</button>\n\n          <button className=\"itemButton\" onClick={() => {\n            // Calls the discard method in Seller that was passed to Card as a prop\n            this.props.discard(this.props.name);\n          }}>Discard</button>\n\n        </div>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}